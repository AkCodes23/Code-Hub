Medium: Implement a Function to Check if the Stack is a Palindrome

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int items[MAX];
    int top;
} Stack;

void initStack(Stack *s) {
    s->top = -1;
}

int isFull(Stack *s) {
    return s->top == MAX - 1;
}

int isEmpty(Stack *s) {
    return s->top == -1;
}

void push(Stack *s, int item) {
    if (isFull(s)) {
        printf("Stack is full\n");
        return;
    }
    s->items[++s->top] = item;
}

int pop(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack is empty\n");
        return -1;
    }
    return s->items[s->top--];
}

int peek(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack is empty\n");
        return -1;
    }
    return s->items[s->top];
}

int isPalindrome(Stack *s) {
    Stack tempStack;
    initStack(&tempStack);
    int original[MAX], reversed[MAX];
    int i = 0, j = 0;

    while (!isEmpty(s)) {
        original[i++] = peek(s);
        push(&tempStack, pop(s));
    }

    while (!isEmpty(&tempStack)) {
        reversed[j++] = peek(&tempStack);
        push(s, pop(&tempStack));
    }

    for (int k = 0; k < i; k++) {
        if (original[k] != reversed[k]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}

int main() {
    Stack s;
    initStack(&s);

    push(&s, 1);
    push(&s, 2);
    push(&s, 3);
    push(&s, 2);
    push(&s, 1);

    if (isPalindrome(&s)) {
        printf("The stack is a palindrome.\n");
    } else {
        printf("The stack is not a palindrome.\n");
    }

    return 0;
}
